#------------- Generated By Build Master 1.0.0 ------------------

# ------------------------------ DOCUMENTATION ---------------------------------
# Release build
# -------------------------
# $ meson setup --wipe <builddir> # wipe the build artifacts (like object files)
# $ meson setup <builddir> --reconfigure --buildtype=release # reconfigure the build directory for release build
# $ meson compile -C <builddir> # compile the project
#
# Debug build
# -------------------------
# $ meson setup --wipe <buildir> # wipe the build artifacts (like object files)
# $ meson setup <builddir> --reconfigure --buildtype=release # reconfigure the build directory for debug build
# $ meson compile -C <builddir> # compile the project
#
# Static Library
# -------------------------
# $ meson setup --wipe <buildir> # wipe the build artifacts (like object files)
# # NOTE: --buildtype=release or --buildtype=debug options can be added here  
# $ meson setup -C <builddir> --reconfigure --default-library=static # reconfigure the build directory for static library
# $ meson compile -C <builddir> # compile the project
# $ meson install -C <builddir> # install the static library
#
# Shared Library
# -------------------------
# $ meson setup --wipe <buildir> # whipe the build artifacts (like object files)
# # NOTE: --buildtype=release or --buildtype=debug options can be added here
# $ meson setup -C <builddir> --reconfigure --default-library=shared # reconfigure the build directory for shared library
# $ meson compile -C <builddir> # compile the project
# $ meson install -C <builddir> # install the shared library
#
# Artifact Installation Directories
# ---------------------------------
# Headers: /include/<ProjectNameInSmallCase>
# Static Libraries: /lib/lib<ProjectNameInSmallCase>.a-
# Shared Libraries: /bin/lib<ProjectNameInSmallCase>.dll
# PkgConfig (.pc) for static library: $PKG_CONFIG_PATH/<ProjectNameInSmallCase>_static.pc
# PkgConfig (.pc) for shared library: $PKG_CONFIG_PATH/<ProjectNameInSmallCase>_shared.pc
#
# -------------------------------- PROJECT CONFIGS -----------------------------

project('BufferLib', 'c', 'cpp',
  version : '1.0.0',
  meson_version: '>=1.1',
  default_options : [
    'warning_level=3',
    'buildtype=debug',
    'c_std=c17',
    'cpp_std=c++20'
  ]
)

# Release Build Defines
release_defines = [
'-DBUF_RELEASE'
] 

# Debug Build Defines
debug_defines = [
'-DBUF_DEBUG'
]

# Source files (common to all targets)
sources = files(
'source/buffer.c', 'source/buffer_test.c'
)

# Include directories
inc = include_directories(
'include'
)

# Library Install Directory
lib_install_dir = get_option('libdir')/'bufferlib'

# Dependencies
dependencies = [
dependency('calltrace')
]

# Linker Arguments
windows_link_args = [ 

]
linux_link_args = [

]
darwin_link_args = [

]

# -------------------------------------------------------------------------------
# ------------------------------ FIXTURE ----------------------------------------

# Compiler configuration
add_project_arguments('-m64', language : 'c')
add_project_arguments('-m64', language : 'cpp')
# Linker configuration
link_args = []
os_name = host_machine.system()
if os_name == 'windows'
  link_args += windows_link_args
elif os_name == 'linux'
  link_args += linux_link_args
elif os_name == 'darwin'
  link_args += darwin_link_args
endif
add_project_link_arguments('-m64', link_args, language : 'c')
add_project_link_arguments('-m64', link_args, language : 'cpp')

# Build type specific defines
build_mode_defines = []
if get_option('buildtype') == 'release'
  add_project_arguments(release_defines, language : 'c')
  add_project_arguments(release_defines, language : 'cpp')
  build_mode_defines += release_defines
else
  add_project_arguments(debug_defines, language : 'c')
  add_project_arguments(debug_defines, language : 'cpp')
  build_mode_defines += debug_defines
endif

# pkg-config package installation
python = find_program('python')
# Try PKG_CONFIG_PATH first, typicallly it succeeds on MINGW64 (MSYS2)
result = run_command(python, '-c', 'import os; print(os.environ["PKG_CONFIG_PATH"])', check : false)
pkgconfig_install_path = ''
if result.returncode() == 0
  str = result.stdout()
  # Unix
  if str.startswith('/')
    pkgconfig_install_path = str.replace(';', ':').split(':')[0]
  # Windows
  else
    pkgconfig_install_path = str.split(';')[0]
  endif
endif
if pkgconfig_install_path == ''
  # Otherwise use pkg-config to query its lookup directories
  message('PKG_CONFIG_PATH seems to be empty, trying another method')
  result = run_command('pkg-config', '--variable', 'pc_path', 'pkg-config', check : false)
  if result.returncode() == 0
    str = result.stdout()
    if str.startswith('/')
      pkgconfig_install_path = str.replace(';', ':').split(':')[0]
    else
      pkgconfig_install_path = str.split(';')[0]
    endif
  # Finally if the above attempts fail, use 'libdir' value
  else
    pkgconfig_install_path = get_option('libdir')
  endif
endif
message('pkg config path: ' + pkgconfig_install_path)

#-------------------------------------------------------------------------------
#--------------------------------BUILD TARGETS----------------------------------
pkgmod = import('pkgconfig')

# -------------- Target: bufferlib_static ------------------
bufferlib_static_sources = [

]
bufferlib_static_link_args = {
'windows' : [],
'linux' : [],
'darwin' : []
}
bufferlib_static_build_defines = [
'-DBUF_BUILD_STATIC_LIBRARY'
]
bufferlib_static_use_defines = [
'-DBUF_USE_STATIC_LIBRARY'
]
bufferlib_static = static_library('bufferlib_static',
	bufferlib_static_sources + sources,
	dependencies: dependencies,
	include_directories: inc,
	install: true,
	install_dir: lib_install_dir,
	c_args: bufferlib_static_build_defines + bufferlib_static_use_defines,
	cpp_args: bufferlib_static_build_defines + bufferlib_static_use_defines, 
	link_args: bufferlib_static_link_args[host_machine.system()],
	gnu_symbol_visibility: 'hidden'
)
bufferlib_static_dep = declare_dependency(
	link_with: bufferlib_static,
	include_directories: inc,
	compile_args: bufferlib_static_use_defines + build_mode_defines
)
pkgmod.generate(bufferlib_static,
	name: 'BufferLib',
	description: 'Static Library for BufferLib',
	filebase: 'bufferlib_static',
	install_dir: pkgconfig_install_path,
	extra_cflags: bufferlib_static_use_defines + build_mode_defines
)

# -------------- Target: bufferlib_shared ------------------
bufferlib_shared_sources = [

]
bufferlib_shared_link_args = {
'windows' : [],
'linux' : [],
'darwin' : []
}
bufferlib_shared_build_defines = [
'-DBUF_BUILD_SHARED_LIBRARY'
]
bufferlib_shared_use_defines = [
'-DBUF_USE_SHARED_LIBRARY'
]
bufferlib_shared = shared_library('bufferlib_shared',
	bufferlib_shared_sources + sources,
	dependencies: dependencies,
	include_directories: inc,
	install: true,
	install_dir: lib_install_dir,
	c_args: bufferlib_shared_build_defines + bufferlib_shared_use_defines,
	cpp_args: bufferlib_shared_build_defines + bufferlib_shared_use_defines, 
	link_args: bufferlib_shared_link_args[host_machine.system()],
	gnu_symbol_visibility: 'hidden'
)
bufferlib_shared_dep = declare_dependency(
	link_with: bufferlib_shared,
	include_directories: inc,
	compile_args: bufferlib_shared_use_defines + build_mode_defines
)
pkgmod.generate(bufferlib_shared,
	name: 'BufferLib',
	description: 'A memory buffer library',
	filebase: 'bufferlib_shared',
	install_dir: pkgconfig_install_path,
	extra_cflags: bufferlib_shared_use_defines + build_mode_defines
)

# -------------- Target: main ------------------
main_sources = [
'source/main.c',
'source/buffer_test.c'
]
main_link_args = {
'windows' : [],
'linux' : [],
'darwin' : []
}
main_defines = [

]
main = executable('main',
	main_sources + sources,
	dependencies: dependencies,
	include_directories: inc,
	install: false,
	c_args: main_defines,
	cpp_args: main_defines, 
	link_args: main_link_args[host_machine.system()],
	gnu_symbol_visibility: 'hidden'
)


#-------------------------------------------------------------------------------
#--------------------------------Header Intallation----------------------------------
# Header installation
install_subdir('include/bufferlib', install_dir : get_option('includedir'))

